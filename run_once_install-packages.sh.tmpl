#!/bin/sh
# These are packages I want on all my machines



# package list with package name for arch, debian
# arch, debian
packages="\
    base-devel,build-essential\
    git,git\
    git-lfs,git-lfs\
    fd,fdfind\
    ripgrep,ripgrep\
    ripgrep-all,ripgrep-all\
    neovim,neovim\
    broot,Idky\
    lsd,lsd\
    handlr,Idky\
    bat,bat\
    bat-extras,Idky\
    visual-studio-code-bin,Idky\
    htop,htop\
    openssh,Idky\
    fish,Idky\
    gparted,Idky\
    python-pipx,Idky\
    zoxide,Idky\
    tinyxxd,Idky\
    hexyl,Idky\
    starship,Idky\
    ttf-jetbrains-mono-nerd,Idky\
"

platforms="arch,debian"


{{ if eq .chezmoi.osRelease.idLike "arch" -}}
platform="arch"
{{ else if eq .chezmoi.osRelease.idLike "debian" -}}
# This could be for another OS
# I can check the data with `chezmoi data`
platform="debian"
{{ end -}}


selected_packages=""

# ensure platform is set and supported
if [ -z "$(echo $platforms | grep $platform)" ]; then
    echo "!! Platform $platform is not one of the supported platforms: $platforms"
    exit 1
fi


for pkg in $packages; do
    if [ "$platform" = "arch" ]; then
        pkg=$(echo $pkg | cut -d, -f1)
    elif [ "$platform" = "debian" ]; then
        pkg=$(echo $pkg | cut -d, -f2)
    fi
    selected_packages="$selected_packages $pkg"
done

if [ "$platform" = "arch" ]; then
    echo -e "\n\nCheking packages  (errors are shown for missing packages)"
    if ! yay -Q $selected_packages; then
        echo -e "\nNew packages needed, partial update or full update? (p/f)"
        echo "(partial updates are not recommended)"
        read -r update

        if [ "$update" = "p" ] || [ "$update" = "P" ]; then
            yay -Sy
        else
            yay -Syu
        fi

        echo -e "\ngoing to do: yay -S $selected_packages --needed"
        yay -S $selected_packages --needed
    fi
elif [ "$platform" = "debian" ]; then
    echo "Syncing packages for debian"
    sudo apt-get update
    echo "going to do: sudo apt-get install $selected_packages --noconfirm --assume-yes --fix-missing"
    sudo apt-get install $selected_packages --noconfirm --assume-yes --fix-missing
fi


################# PIPX #################

pipx_packages=(
    "shell-gpt"
    # more packages without , but just new lines
)

echo -e "\nChecking pipx packages"

for package in "${pipx_packages[@]}"; do
    pipx list | grep "$package" >/dev/null 2>&1 || (
        echo "Installing pipx $package..."
        pipx install "$package"
    )
done

pipx ensurepath > /dev/null 2>&1



services=(
    # none yet
)

for svc in "${services[@]}"; do
    echo -n "checking $svc... "
    systemctl is-enabled --type=service "$svc" > /dev/null && echo "already enabled" || (
        echo "\nEnableing $svc..."
        systemctl enable --now "$svc"
    )
done



################# Host specific #################

host="$(hostname)"
if [ "$host" = "kawasaki" ]; then
    echo -e "\nApplying for individual host $host"
    kawasaki_packages=(
        intel-undervolt
        kanata-bin # AUR package
        #tlp # somehow kde does this really good on its own
        qt6-sensors # needed for auto rotation in tablet mode
    )

    # kanata
    if ! [ -f '/lib/systemd/system/kanata.service' ]; then 
        echo 'kanata.service does not exist, copying using sudo!!...'
        sudo cp /home/horo/.config/kanata/kanata.service /lib/systemd/system/kanata.service
    fi

    # intel undervold
    # check if the config is not edited on this system, (ensures only copy once)
    if [ $(pacman -Qkk intel-undervolt | grep -c 'intel-undervolt.conf') -eq 0 ]; then
        echo 'intel-undervolt.conf does not exist, copying using sudo!!...'
        sudo cp /home/horo/.config/etc-target/intel-undervolt.conf /etc/intel-undervolt.conf
    fi


    selected_packages=""
    # transform to string
    for pkg in "${kawasaki_packages[@]}"; do selected_packages="$selected_packages $pkg" ; done

    echo "Cheking packages for $host (errors are shown for missing packages)"
    if ! yay -Q $selected_packages; then
        yay -S $selected_packages --needed
    fi

    echo -e "\nChecking Services for $host"
    kawasaki_services=(
        intel-undervolt.service
        kanata.service
    )

    for svc in "${kawasaki_services[@]}"; do
        echo -n "checking $svc... "
        systemctl is-enabled --type=service "$svc" > /dev/null && echo "already enabled" || (
            echo -e "\nEnableing $svc..."
            systemctl enable --now "$svc"
        )
    done
fi


################# Settings scripts ################

FIRST_WALLPAPER_IMAGE="$(ls /home/horo/Pictures/wallpapers | head -n 1)"
if [ -n "$FIRST_WALLPAPER_IMAGE" ]; then
    echo "Trying to set plasma6 wallpaper to $FIRST_WALLPAPER_IMAGE"
    plasma-apply-wallpaperimage /home/horo/Pictures/wallpapers/$FIRST_WALLPAPER_IMAGE 2>&1 1>/dev/null
fi

